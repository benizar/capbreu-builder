source("accent.R")
source("soundexES.R")
library("RecordLinkage")
##Compute a phonetics dataframe
two_word_similarities <- function(a,b) {
phonetics=levenshteinSim(soundexES(a), soundexES(b))
editdistance=levenshteinSim(a, b)
#   data.frame(
#     a=a,b=b,similarity=round((editdistance+phonetics)/2,2)
#   )
return(round((editdistance+phonetics)/2,2))
}
##Compare two complete names, all words
phrase_similarities <- function(pa,pb){
paw <- unlist(strsplit(as.character(pa), split=" "))
pbw <- unlist(strsplit(as.character(pb), split=" "))
for (a in paw){
sima=0
for(b in pbw){
sima=sima+two_word_similarities(a,b)
}
}
#Average word Similarity
sima/length(pbw)
}
#Filter neighbours and compare neighbour vs landholder
neigh<-df[df$Variable == 'Neighbour', ]
sim<-phrase_similarities(neigh$Landholder[14],neigh$Value[14])
library(yaml)
library(plyr)
library(reshape2)
library(rgdal)
load.landSchema <- function(x){
##LOAD YAML
yaml<-yaml.load_file(x)
#LOAD METADATA
structure <- yaml$Structure
title <- yaml$Title
description <- yaml$Description
landmetrics <- unlist(yaml$Landmetrics)
aggregations <- unlist(yaml$Aggregations)
##LOAD SPATIAL DATA
spatial_data <- lapply(yaml$Spatial_data, function(x) {readOGR(dsn=x, layer=ogrListLayers(x))})
spatial_data <- setNames(spatial_data,basename(yaml$Spatial_data))
##LOAD DATA
##Unlist the elements of the yaml
landholders <- lapply(yaml$Landholders, function(x){ unlist(x)})
##Convert it to a data frame
landholders <- rbind.fill(lapply(landholders, function(x) do.call("data.frame", as.list(x))))
##Transpose the data frame
#TODO: REVISAR - Warning message:attributes are not identical across measure variables; they will be dropped
landholders <- melt(landholders, id=c("Landholder"))
##Sort by name
landholders <- landholders[order(landholders$Landholder),]
##Complete cases to remove rows with NA values BUT,NULL GUESSINGS ARE REMOVED TOO!!!
landholders <- landholders[complete.cases(landholders),]
##Split Reshape2 variable into "relation_type"."detail"
landholders <- data.frame(landholders$Landholder, landholders$variable, do.call('rbind', strsplit(as.character(landholders$variable),'.',fixed=TRUE)), landholders$value)
##Replace 'Plots' introduced by variable recycling by 0 index
levels(landholders$X4) <- c(levels(landholders$X4), 0)
landholders$X4[landholders$X4 == 'Plots'] <- 0
##Replace numbered variables
##NeighboursX by "Neighbour"
levels(landholders$X3) <- c(levels(landholders$X3), 'Neighbour')
landholders$X3[grepl("Neigh",landholders$X3)] <- 'Neighbour'
##NaturalX by "Natural"
levels(landholders$X3) <- c(levels(landholders$X3), 'Natural')
landholders$X3[grepl("Natur",landholders$X3)] <- 'Natural'
##AnthropicX by "Anthropic"
levels(landholders$X3) <- c(levels(landholders$X3), 'Anthropic')
landholders$X3[grepl("Anthro",landholders$X3)] <- 'Anthropic'
##AdministrativeX by "Administrative"
levels(landholders$X3) <- c(levels(landholders$X3), 'Administrative')
landholders$X3[grepl("Admin",landholders$X3)] <- 'Administrative'
##Landholders dataframe and names
landholders<-data.frame(landholders$landholders.Landholder,landholders$X2,landholders$X3,landholders$X4,landholders$landholders.value)
names(landholders)[1] <- "Landholder"
names(landholders)[2] <- "VarCategory"
names(landholders)[3] <- "Variable"
names(landholders)[4] <- "Plot"
names(landholders)[5] <- "Value"
##Append a landholder-based index
LandholderId<-as.numeric(landholders$Landholder)
landholders<-cbind(LandholderId, landholders)
##Resulting named list
result <- setNames(list(
structure,title,description,landmetrics,aggregations,spatial_data,landholders),
c("structure","title","description","landmetrics","aggregations","spatial_data","landholders"))
return(result)
}
##USAGE
cabreve <- load.landSchema("C:\\Users\\benizar\\Dropbox\\article_cabreve\\load_data\\capbreu_load_tests.yml")
#Filter neighbours and compare neighbour vs landholder
neigh<-df[df$Variable == 'Neighbour', ]
sim<-phrase_similarities(neigh$Landholder[14],neigh$Value[14])
df<-cabreve$landholders
neigh<-df[df$Variable == 'Neighbour', ]
sim<-phrase_similarities(neigh$Landholder[14],neigh$Value[14])
View(df)
View(neigh)
sim<-phrase_similarities(neigh$Landholder[1],neigh$Value[1])
sim<-phrase_similarities(neigh$Landholder[4],neigh$Value[4])
two_word_similarities('Lorenzo','Llorenç')
two_word_similarities('Lorenzo','Llorenzo')
two_word_similarities('Lorenzo','Lorenzo')
phrase_similarities('Lorenzo','Lorenzo')
phrase_similarities('Lorenzo','Llorenç')
phrase_similarities('Lorenzo Pérez Mayor','Llorenç Peres Major')
phrase_similarities('Lorenzo Pérez','Llorenç Peres')
View(neigh)
phrase_similarities('Lorenzo Perez Mayor','Amaro Seva')
sim<-phrase_similarities(neigh$Landholder[4],neigh$Value[4])
sim<-phrase_similarities(neigh$Landholder[4],neigh$Value[4])
sim<-phrase_similarities(neigh$Landholder[1],neigh$Value[1])
sim<-phrase_similarities(neigh$Landholder[4],neigh$Value[4])
phrase_similarities('Lorenzo Perez Mayor','Lorenzo Perez Mayor')
phrase_similarities('Lorenzo Perez','Lorenzo Perez')
##Compare two complete names, all words
phrase_similarities <- function(pa,pb){
paw <- unlist(strsplit(as.character(pa), split=" "))
pbw <- unlist(strsplit(as.character(pb), split=" "))
phrase_result=0
for (a in paw){
word_result=0#Similarity of most similar words
for(b in pbw){
temp=two_word_similarities(a,b)
if(temp>word_result)
word_result=temp
}
phrase_result=phrase_result+word_result
}
#Average phrase similarity
phrase_result
}
sim<-phrase_similarities(neigh$Landholder[4],neigh$Value[4])
##Compare two complete names, all words
phrase_similarities <- function(pa,pb){
paw <- unlist(strsplit(as.character(pa), split=" "))
pbw <- unlist(strsplit(as.character(pb), split=" "))
phrase_result=0
for (a in paw){
word_result=0#Similarity of most similar words
for(b in pbw){
temp=two_word_similarities(a,b)
if(temp>word_result)
word_result=temp
}
phrase_result=phrase_result+word_result
}
#Average phrase similarity
phrase_result/lenght(paw)
}
sim<-phrase_similarities(neigh$Landholder[4],neigh$Value[4])
##Compare two complete names, all words
phrase_similarities <- function(pa,pb){
paw <- unlist(strsplit(as.character(pa), split=" "))
pbw <- unlist(strsplit(as.character(pb), split=" "))
phrase_result=0
for (a in paw){
word_result=0#Similarity of most similar words
for(b in pbw){
temp=two_word_similarities(a,b)
if(temp>word_result)
word_result=temp
}
phrase_result=phrase_result+word_result
}
#Average phrase similarity
phrase_result/length(paw)
}
sim<-phrase_similarities(neigh$Landholder[4],neigh$Value[4])
sim<-phrase_similarities(neigh$Landholder[4],'Francisco Gomis Mayor')
sim<-phrase_similarities(neigh$Landholder[165],neigh$Value[165])
sim<-phrase_similarities(neigh$Landholder[230],neigh$Value[230])
sim<-phrase_similarities(neigh$Landholder[229],neigh$Value[229])
View(df)
View(neigh)
neigh<-df[df$Variable == 'Neighbour', c("Value","Landholder")]
View(neigh)
phrase_similarities(neigh$Value[4],neigh$Landholder[4])
mapply(phrase_similarities(x,y),x=neigh$Value,y=neigh$Landholder)
lapply(neigh$Value,function(x)x)
lapply(neigh,phrase_similarities(neigh$Value,neigh$Landholder))
test<-lapply(neigh,phrase_similarities(neigh$Value,neigh$Landholder))
View(neigh)
for(neighbour in neigh$Value){
for(landholder in neigh$Landholder){
phrase_similarities(neighbour,landholder)
}
}
test<-for(neighbour in neigh$Value){
for(landholder in neigh$Landholder){
phrase_similarities(neighbour,landholder)
}
}
unique(neigh$Landholder)
test<-for(neighbour in neigh$Value){
for(landholder in unique(neigh$Landholder){
phrase_similarities(neighbour,landholder)
}
}
test<-for(neighbour in neigh$Value){
for(landholder in unique(neigh$Landholder){
phrase_similarities(neighbour,landholder)
}
}
test<-for(neighbour in neigh$Value){
for(landholder in unique(neigh$Landholder){
phrase_similarities(neighbour,landholder)
}
}
for(neighbour in neigh$Value){
for(landholder in unique(neigh$Landholder){
phrase_similarities(neighbour,landholder)
}
}
for(neighbour in neigh$Value){
for(landholder in unique(neigh$Landholder){
phrase_similarities(neighbour,landholder)
}
}
for(neighbour in neigh$Value){
neighbour
}
unique(neigh$Value)
mapply(function(x,y) seq_len(x) + y,
c(a= 1, b=2, c= 3),  # names from first
c(A=10, B=0, C=-10))
mapply(neighbour_similarities(x,y),
neigh$Value,
unique(neigh$Landholder))
mapply(phrase_similarities(x,y),
neigh$Value,
unique(neigh$Landholder))
phrase_similarities(neigh$Value[4],neigh$Landholder[4])
lapply(df, function(x) if(is.numeric(x)) sum(x, na.rm=T))
lapply(df, function(x) df$Value)
lapply(df, function(x) phrase_similarities(df$Landholder,df$Value) )
lapply(df, phrase_similarities(df$Value,unique(df$Landholder))
)
neigh$neighSimilarity <- phrase_similarities(neighbour,landholder)
View(neigh)
neigh$neighSimilarity <- phrase_similarities(neigh$Value,neigh$Landholder)
neigh$sim <- phrase_similarities(neigh$Value,neigh$Landholder)
neigh$sim <- paste(neigh$Value,neigh$Landholder)
View(neigh)
neigh$sim <- phrase_similarities(neigh$Value,neigh$Landholder)
phrase_similarities(neigh$Value[4],neigh$Landholder[4])
View(neigh)
View(neigh)
kk<-df[ , c("Values","Landholders")]
kk<-df[ , c("Value","Landholder")]
View(kk)
kk<-df[df$Variable=='Neighbour', c("Value","Landholder")]
View(kk)
kk<-df[df$Variable=='Neighbour', c("Value","Landholder")]
View(kk)
View(df)
library(yaml)
library(plyr)
library(reshape2)
library(rgdal)
yaml<-yaml.load_file("C:\\Users\\benizar\\Dropbox\\article_cabreve\\load_data\\capbreu_load_tests.yml")
#LOAD METADATA
structure <- yaml$Structure
title <- yaml$Title
description <- yaml$Description
landmetrics <- unlist(yaml$Landmetrics)
aggregations <- unlist(yaml$Aggregations)
##LOAD SPATIAL DATA
spatial_data <- lapply(yaml$Spatial_data, function(x) {readOGR(dsn=x, layer=ogrListLayers(x))})
spatial_data <- setNames(spatial_data,basename(yaml$Spatial_data))
##LOAD DATA
##Unlist the elements of the yaml
landholders <- lapply(yaml$Landholders, function(x){ unlist(x)})
##Convert it to a data frame
landholders <- rbind.fill(lapply(landholders, function(x) do.call("data.frame", as.list(x))))
##Transpose the data frame
#TODO: REVISAR - Warning message:attributes are not identical across measure variables; they will be dropped
landholders <- melt(landholders, id=c("Landholder"))
##Sort by name
landholders <- landholders[order(landholders$Landholder),]
##Complete cases to remove rows with NA values BUT,NULL GUESSINGS ARE REMOVED TOO!!!
landholders <- landholders[complete.cases(landholders),]
##Split Reshape2 variable into "relation_type"."detail"
landholders <- data.frame(landholders$Landholder, landholders$variable, do.call('rbind', strsplit(as.character(landholders$variable),'.',fixed=TRUE)), landholders$value)
##Replace 'Plots' introduced by variable recycling by 0 index
levels(landholders$X4) <- c(levels(landholders$X4), 0)
landholders$X4[landholders$X4 == 'Plots'] <- 0
landholders$X4[landholders$X4 == 'Plots'] <- paste(landholders$landholder,landholders$x4, sep = '-')
View(landholders)
View(landholders)
##Replace 'Plots' introduced by variable recycling by 0 index
levels(landholders$X4) <- c(levels(landholders$X4), 0)
landholders$X4[landholders$X4 == 'Plots'] <- 0
##Replace numbered variables
##NeighboursX by "Neighbour"
levels(landholders$X3) <- c(levels(landholders$X3), 'Neighbour')
landholders$X3[grepl("Neigh",landholders$X3)] <- 'Neighbour'
##NaturalX by "Natural"
levels(landholders$X3) <- c(levels(landholders$X3), 'Natural')
landholders$X3[grepl("Natur",landholders$X3)] <- 'Natural'
##AnthropicX by "Anthropic"
levels(landholders$X3) <- c(levels(landholders$X3), 'Anthropic')
landholders$X3[grepl("Anthro",landholders$X3)] <- 'Anthropic'
##AdministrativeX by "Administrative"
levels(landholders$X3) <- c(levels(landholders$X3), 'Administrative')
landholders$X3[grepl("Admin",landholders$X3)] <- 'Administrative'
##Landholders dataframe and names
landholders<-data.frame(landholders$landholders.Landholder,landholders$X2,landholders$X3,landholders$X4,landholders$landholders.value)
names(landholders)[1] <- "Landholder"
names(landholders)[2] <- "VarCategory"
names(landholders)[3] <- "Variable"
names(landholders)[4] <- "Plot"
names(landholders)[5] <- "Value"
##Append a landholder-based index
LandholderId<-as.numeric(landholders$Landholder)
landholders<-cbind(LandholderId, landholders)
View(landholders)
landholders$Plot[landholders$Plot == 0] <- paste(landholders$landholder,landholders$Plot, sep = '-')
View(landholders)
landholders$Plot <- paste(landholders$landholder,landholders$Plot, sep = '-')
View(landholders)
landholders$Plot <- paste(landholders$Landholder,landholders$Plot, sep = '-')
View(landholders)
landmetrics <- unlist(yaml$Landmetrics)
landmetrics
library(yaml)
library(plyr)
library(reshape2)
library(rgdal)
load.landSchema <- function(x){
##LOAD YAML
yaml<-yaml.load_file(x)
#LOAD METADATA
structure <- yaml$Structure
title <- yaml$Title
description <- yaml$Description
landmetrics <- unlist(yaml$Landmetrics)
aggregations <- unlist(yaml$Aggregations)
##LOAD SPATIAL DATA
spatial_data <- lapply(yaml$Spatial_data, function(x) {readOGR(dsn=x, layer=ogrListLayers(x))})
spatial_data <- setNames(spatial_data,basename(yaml$Spatial_data))
##LOAD DATA
##Unlist the elements of the yaml
landholders <- lapply(yaml$Landholders, function(x){ unlist(x)})
##Convert it to a data frame
landholders <- rbind.fill(lapply(landholders, function(x) do.call("data.frame", as.list(x))))
##Transpose the data frame
#TODO: REVISAR - Warning message:attributes are not identical across measure variables; they will be dropped
landholders <- melt(landholders, id=c("Landholder"))
##Sort by name
landholders <- landholders[order(landholders$Landholder),]
##Complete cases to remove rows with NA values BUT,NULL GUESSINGS ARE REMOVED TOO!!!
landholders <- landholders[complete.cases(landholders),]
##Split Reshape2 variable into "relation_type"."detail"
landholders <- data.frame(landholders$Landholder, landholders$variable, do.call('rbind', strsplit(as.character(landholders$variable),'.',fixed=TRUE)), landholders$value)
##Replace 'Plots' introduced by variable recycling by 0 index
levels(landholders$X4) <- c(levels(landholders$X4), 0)
landholders$X4[landholders$X4 == 'Plots'] <- 0
##Replace numbered variables
##NeighboursX by "Neighbour"
levels(landholders$X3) <- c(levels(landholders$X3), 'Neighbour')
landholders$X3[grepl("Neigh",landholders$X3)] <- 'Neighbour'
##NaturalX by "Natural"
levels(landholders$X3) <- c(levels(landholders$X3), 'Natural')
landholders$X3[grepl("Natur",landholders$X3)] <- 'Natural'
##AnthropicX by "Anthropic"
levels(landholders$X3) <- c(levels(landholders$X3), 'Anthropic')
landholders$X3[grepl("Anthro",landholders$X3)] <- 'Anthropic'
##AdministrativeX by "Administrative"
levels(landholders$X3) <- c(levels(landholders$X3), 'Administrative')
landholders$X3[grepl("Admin",landholders$X3)] <- 'Administrative'
##Landholders dataframe and names
landholders<-data.frame(landholders$landholders.Landholder,landholders$X2,landholders$X3,landholders$X4,landholders$landholders.value)
names(landholders)[1] <- "Landholder"
names(landholders)[2] <- "VarCategory"
names(landholders)[3] <- "Variable"
names(landholders)[4] <- "Plot"
names(landholders)[5] <- "Value"
##Append a landholder-based index
LandholderId<-as.numeric(landholders$Landholder)
landholders<-cbind(LandholderId, landholders)
##Plot to plot index
landholders$Plot <- paste(landholders$Landholder,landholders$Plot, sep = '-')
##Resulting named list
result <- setNames(list(
structure,title,description,landmetrics,aggregations,spatial_data,landholders),
c("structure","title","description","landmetrics","aggregations","spatial_data","landholders"))
return(result)
}
cabreve <- load.landSchema("C:\\Users\\benizar\\Dropbox\\article_cabreve\\load_data\\capbreu_load_tests.yml")
landholders<-cabreve$landholders
View(landholders)
landholders[landholder$Landholder,]
landholders[landholders$Landholder,]
#LOAD METADATA
structure <- yaml$Structure
title <- yaml$Title
description <- yaml$Description
landmetrics <- unlist(yaml$Landmetrics)
aggregations <- unlist(yaml$Aggregations)
##LOAD SPATIAL DATA
spatial_data <- lapply(yaml$Spatial_data, function(x) {readOGR(dsn=x, layer=ogrListLayers(x))})
spatial_data <- setNames(spatial_data,basename(yaml$Spatial_data))
##LOAD DATA
##Unlist the elements of the yaml
landholders <- lapply(yaml$Landholders, function(x){ unlist(x)})
landholders <- rbind.fill(lapply(landholders, function(x) do.call("data.frame", as.list(x))))
View(landholders)
landholders <- melt(landholders, id=c("Landholder"))
View(landholders)
